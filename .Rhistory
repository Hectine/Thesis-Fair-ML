# Safely compare metrics, only if they are not NA
if (!is.na(metrics$FPR) && metrics$FPR == min_FPR) most_privileged$FPR <- subpop
if (!is.na(metrics$FNR) && metrics$FNR == max_FNR) most_privileged$FNR <- subpop
if (!is.na(metrics$proportion_favorable) && metrics$proportion_favorable == max_DP) most_privileged$Demographic_Parity <- subpop
if (!is.na(metrics$FPR) && metrics$FPR == max_FPR) most_disadvantaged$FPR <- subpop
if (!is.na(metrics$FNR) && metrics$FNR == min_FNR) most_disadvantaged$FNR <- subpop
if (!is.na(metrics$proportion_favorable) && metrics$proportion_favorable == min_DP) most_disadvantaged$Demographic_Parity <- subpop
}
return(list(most_privileged = most_privileged, most_disadvantaged = most_disadvantaged))
}
# Calculate benchmark metrics
cm_train <- table(data_train$crime, prediction_train)
cm_test <- table(data_test$crime, prediction_test)
# Create a list to store metrics for all subpopulations
subpop_metrics_train <- list()
subpop_metrics_test <- list()
# Iterate over combinations of Gender, Ethnicity, and Disability
for (gender in c("Male", "Female")) {
for (ethnicity in c("Minority", "Majority")) {
for (disability in c("Yes", "No")) {
subpop <- paste(gender, ethnicity, disability, sep = "_")
# Index selection
indices_train <- which(data_train$gender == gender & data_train$ethnicity == ethnicity & data_train$disability == disability)
indices_test <- which(data_test$gender == gender & data_test$ethnicity == ethnicity & data_test$disability == disability)
# Confusion matrix
cm_train_subpop <- table(data_train[indices_train,]$crime, prediction_train[indices_train])
cm_test_subpop <- table(data_test[indices_test,]$crime, prediction_test[indices_test])
# Calculate metrics
metrics_train <- calculate_metrics(cm_train_subpop, cm_train)
metrics_test <- calculate_metrics(cm_test_subpop, cm_test)
# Store metrics
subpop_metrics_train[[subpop]] <- metrics_train
subpop_metrics_test[[subpop]] <- metrics_test
# Display results
display_results(subpop, metrics_train, metrics_test)
}
}
}
# Find the most privileged and most disadvantaged subpopulations
extremes_train <- find_extremes(subpop_metrics_train)
extremes_test <- find_extremes(subpop_metrics_test)
# Display the most privileged and disadvantaged subpopulations
cat("### RANKING OF SUBPOPULATIONS###")
cat("\n### Most Privileged Subpopulations (Training Data) ###\n")
cat("1. Lowest FPR:", extremes_train$most_privileged$FPR, "\n")
cat("2. Highest FNR (most desirable):", extremes_train$most_privileged$FNR, "\n")
cat("3. Highest Proportion of Favorable Outcome (Demographic Parity):", extremes_train$most_privileged$Demographic_Parity, "\n")
cat("\n### Most Disadvantaged Subpopulations (Training Data) ###\n")
cat("1. Highest FPR:", extremes_train$most_disadvantaged$FPR, "\n")
cat("2. Lowest FNR (least desirable):", extremes_train$most_disadvantaged$FNR, "\n")
cat("3. Lowest Proportion of Favorable Outcome (Demographic Parity):", extremes_train$most_disadvantaged$Demographic_Parity, "\n")
cat("\n### Most Privileged Subpopulations (Test Data) ###\n")
cat("1. Lowest FPR:", extremes_test$most_privileged$FPR, "\n")
cat("2. Highest FNR (most desirable):", extremes_test$most_privileged$FNR, "\n")
cat("3. Highest Proportion of Favorable Outcome (Demographic Parity):", extremes_test$most_privileged$Demographic_Parity, "\n")
cat("\n### Most Disadvantaged Subpopulations (Test Data) ###\n")
cat("1. Highest FPR:", extremes_test$most_disadvantaged$FPR, "\n")
cat("2. Lowest FNR (least desirable):", extremes_test$most_disadvantaged$FNR, "\n")
cat("3. Lowest Proportion of Favorable Outcome (Demographic Parity):", extremes_test$most_disadvantaged$Demographic_Parity, "\n")
# Create a list to store all extracted elements
extracted_metrics <- list(
# Model performance
auc = auc_value,
accuracy_test = accuracy_test,
accuracy_train = accuracy_train,
# Benchmark metrics
proportion_favorable_benchmark_test = proportion_favorable_benchmark_test,
FPR_benchmark_test = FPR_benchmark_test,
FNR_benchmark_test = FNR_benchmark_test,
# Single attribute comparison
Male_proportion_favorable = metrics_test_male$proportion_favorable,
Male_FPR = metrics_test_male$FPR,
Male_FNR = metrics_test_male$FNR,
Female_proportion_favorable = metrics_test_female$proportion_favorable,
Female_FPR = metrics_test_female$FPR,
Female_FNR = metrics_test_female$FNR,
Disabled_proportion_favourable = metrics_test_disabled$proportion_favorable,
Disabled_FPR = metrics_test_disabled$FPR,
Disabled_FNR = metrics_test_disabled$FNR,
Abled_proportion_favorable = metrics_test_abled$proportion_favorable,
Abled_FPR = metrics_test_abled$FPR,
Abled_FNR = metrics_test_abled$FNR,
Minority_proportion_favorable = metrics_test_minority$proportion_favorable,
Minority_FPR = metrics_test_minority$FPR,
Minority_FNR = metrics_test_minority$FNR,
Majority_proportion_favorable = metrics_test_majority$proportion_favorable,
Majority_FPR = metrics_test_majority$FPR,
Majority_FNR = metrics_test_majority$FNR,
# Obtained metrics from subpopulations
# Male_Minority_Yes
Male_Minority_Yes_proportion_favorable = subpop_metrics_test$Male_Minority_Yes$proportion_favorable,
Male_Minority_Yes_proportion_favorable_ratio = subpop_metrics_test$Male_Minority_Yes$proportion_favorable_ratio,
Male_Minority_Yes_FPR = subpop_metrics_test$Male_Minority_Yes$FPR,
Male_Minority_Yes_FPR_ratio = subpop_metrics_test$Male_Minority_Yes$FPR_ratio,
Male_Minority_Yes_FNR = subpop_metrics_test$Male_Minority_Yes$FNR,
Male_Minority_Yes_FNR_ratio = subpop_metrics_test$Male_Minority_Yes$FNR_ratio,
# Male_Minority_No
Male_Minority_No_proportion_favorable = subpop_metrics_test$Male_Minority_No$proportion_favorable,
Male_Minority_No_proportion_favorable_ratio = subpop_metrics_test$Male_Minority_No$proportion_favorable_ratio,
Male_Minority_No_FPR = subpop_metrics_test$Male_Minority_No$FPR,
Male_Minority_No_FPR_ratio = subpop_metrics_test$Male_Minority_No$FPR_ratio,
Male_Minority_No_FNR = subpop_metrics_test$Male_Minority_No$FNR,
Male_Minority_No_FNR_ratio = subpop_metrics_test$Male_Minority_No$FNR_ratio,
# Male_Majority_Yes
Male_Majority_Yes_proportion_favorable = subpop_metrics_test$Male_Majority_Yes$proportion_favorable,
Male_Majority_Yes_proportion_favorable_ratio = subpop_metrics_test$Male_Majority_Yes$proportion_favorable_ratio,
Male_Majority_Yes_FPR = subpop_metrics_test$Male_Majority_Yes$FPR,
Male_Majority_Yes_FPR_ratio = subpop_metrics_test$Male_Majority_Yes$FPR_ratio,
Male_Majority_Yes_FNR = subpop_metrics_test$Male_Majority_Yes$FNR,
Male_Majority_Yes_FNR_ratio = subpop_metrics_test$Male_Majority_Yes$FNR_ratio,
# Male_Majority_No
Male_Majority_No_proportion_favorable = subpop_metrics_test$Male_Majority_No$proportion_favorable,
Male_Majority_No_proportion_favorable_ratio = subpop_metrics_test$Male_Majority_No$proportion_favorable_ratio,
Male_Majority_No_FPR = subpop_metrics_test$Male_Majority_No$FPR,
Male_Majority_No_FPR_ratio = subpop_metrics_test$Male_Majority_No$FPR_ratio,
Male_Majority_No_FNR = subpop_metrics_test$Male_Majority_No$FNR,
Male_Majority_No_FNR_ratio = subpop_metrics_test$Male_Majority_No$FNR_ratio,
# Female_Minority_Yes
Female_Minority_Yes_proportion_favorable = subpop_metrics_test$Female_Minority_Yes$proportion_favorable,
Female_Minority_Yes_proportion_favorable_ratio = subpop_metrics_test$Female_Minority_Yes$proportion_favorable_ratio,
Female_Minority_Yes_FPR = subpop_metrics_test$Female_Minority_Yes$FPR,
Female_Minority_Yes_FPR_ratio = subpop_metrics_test$Female_Minority_Yes$FPR_ratio,
Female_Minority_Yes_FNR = subpop_metrics_test$Female_Minority_Yes$FNR,
Female_Minority_Yes_FNR_ratio = subpop_metrics_test$Female_Minority_Yes$FNR_ratio,
# Female_Minority_No
Female_Minority_No_proportion_favorable = subpop_metrics_test$Female_Minority_No$proportion_favorable,
Female_Minority_No_proportion_favorable_ratio = subpop_metrics_test$Female_Minority_No$proportion_favorable_ratio,
Female_Minority_No_FPR = subpop_metrics_test$Female_Minority_No$FPR,
Female_Minority_No_FPR_ratio = subpop_metrics_test$Female_Minority_No$FPR_ratio,
Female_Minority_No_FNR = subpop_metrics_test$Female_Minority_No$FNR,
Female_Minority_No_FNR_ratio = subpop_metrics_test$Female_Minority_No$FNR_ratio,
# Female_Majority_Yes
Female_Majority_Yes_proportion_favorable = subpop_metrics_test$Female_Majority_Yes$proportion_favorable,
Female_Majority_Yes_proportion_favorable_ratio = subpop_metrics_test$Female_Majority_Yes$proportion_favorable_ratio,
Female_Majority_Yes_FPR = subpop_metrics_test$Female_Majority_Yes$FPR,
Female_Majority_Yes_FPR_ratio = subpop_metrics_test$Female_Majority_Yes$FPR_ratio,
Female_Majority_Yes_FNR = subpop_metrics_test$Female_Majority_Yes$FNR,
Female_Majority_Yes_FNR_ratio = subpop_metrics_test$Female_Majority_Yes$FNR_ratio,
# Female_Majority_No
Female_Majority_No_proportion_favorable = subpop_metrics_test$Female_Majority_No$proportion_favorable,
Female_Majority_No_proportion_favorable_ratio = subpop_metrics_test$Female_Majority_No$proportion_favorable_ratio,
Female_Majority_No_FPR = subpop_metrics_test$Female_Majority_No$FPR,
Female_Majority_No_FPR_ratio = subpop_metrics_test$Female_Majority_No$FPR_ratio,
Female_Majority_No_FNR = subpop_metrics_test$Female_Majority_No$FNR,
Female_Majority_No_FNR_ratio = subpop_metrics_test$Female_Majority_No$FNR_ratio
)
if(initialize_df == TRUE) {
# Initialize the data frame with row names derived from the names of the list elements
df_metrics <- data.frame(matrix(ncol = 0, nrow = length(extracted_metrics)))
rownames(df_metrics) <- names(extracted_metrics)
}
# Create a descriptive column name
column_name <- paste(
algorithm,
if (tuned) "Tuned" else "Not_Tuned",
paste0("Threshold_", threshold),
if (missing_data) paste0("MissingData_", NA_method) else "NoMissingData",
if (scarce_outcome) paste0("ScarceOutcome_", scarce_outcome_method) else "NoScarceOutcome",
sep = "__"
)
# Add the values from the list to the new column in the data frame
df_metrics[[column_name]] <- unlist(extracted_metrics)
df_metrics
14*5*2
16*5*2
4*4*5*2
4*5*2
40*4
160*2+80
# FPR
extremes_test$most_disadvantaged$FPR / extremes_test$most_privileged$FPR
extremes_test$most_disadvantaged$FPR
extremes
extremes_test
subpop_metrics_train
# FPR
max(subpop_metrics_test)
subpop_metrics_test
unlist(subpop_metrics_test)
max(unlist(subpop_metrics_test))
unlist(subpop_metrics_test)
# Function to find the most privileged and most disadvantaged subpopulations
find_extremes <- function(metrics_list) {
most_privileged <- list(FPR = NULL, FNR = NULL, Demographic_Parity = NULL)
most_disadvantaged <- list(FPR = NULL, FNR = NULL, Demographic_Parity = NULL)
# Initialize values for comparison
min_FPR <- min(sapply(metrics_list, function(x) x$FPR), na.rm = TRUE)
max_FNR <- max(sapply(metrics_list, function(x) x$FNR), na.rm = TRUE)
max_DP <- max(sapply(metrics_list, function(x) x$proportion_favorable), na.rm = TRUE)
max_FPR <- max(sapply(metrics_list, function(x) x$FPR), na.rm = TRUE)
min_FNR <- min(sapply(metrics_list, function(x) x$FNR), na.rm = TRUE)
min_DP <- min(sapply(metrics_list, function(x) x$proportion_favorable), na.rm = TRUE)
# Iterate through subpopulations to find the extremes
for (subpop in names(metrics_list)) {
metrics <- metrics_list[[subpop]]
# Compare metrics and store both subpopulation and value
if (!is.na(metrics$FPR) && metrics$FPR == min_FPR)
most_privileged$FPR <- list(subpop = subpop, value = metrics$FPR)
if (!is.na(metrics$FNR) && metrics$FNR == max_FNR)
most_privileged$FNR <- list(subpop = subpop, value = metrics$FNR)
if (!is.na(metrics$proportion_favorable) && metrics$proportion_favorable == max_DP)
most_privileged$Demographic_Parity <- list(subpop = subpop, value = metrics$proportion_favorable)
if (!is.na(metrics$FPR) && metrics$FPR == max_FPR)
most_disadvantaged$FPR <- list(subpop = subpop, value = metrics$FPR)
if (!is.na(metrics$FNR) && metrics$FNR == min_FNR)
most_disadvantaged$FNR <- list(subpop = subpop, value = metrics$FNR)
if (!is.na(metrics$proportion_favorable) && metrics$proportion_favorable == min_DP)
most_disadvantaged$Demographic_Parity <- list(subpop = subpop, value = metrics$proportion_favorable)
}
return(list(most_privileged = most_privileged, most_disadvantaged = most_disadvantaged))
}
# Calculate benchmark metrics
cm_train <- table(data_train$crime, prediction_train)
cm_test <- table(data_test$crime, prediction_test)
# Create a list to store metrics for all subpopulations
subpop_metrics_train <- list()
subpop_metrics_test <- list()
# Iterate over combinations of Gender, Ethnicity, and Disability
for (gender in c("Male", "Female")) {
for (ethnicity in c("Minority", "Majority")) {
for (disability in c("Yes", "No")) {
subpop <- paste(gender, ethnicity, disability, sep = "_")
# Index selection
indices_train <- which(data_train$gender == gender & data_train$ethnicity == ethnicity & data_train$disability == disability)
indices_test <- which(data_test$gender == gender & data_test$ethnicity == ethnicity & data_test$disability == disability)
# Confusion matrix
cm_train_subpop <- table(data_train[indices_train,]$crime, prediction_train[indices_train])
cm_test_subpop <- table(data_test[indices_test,]$crime, prediction_test[indices_test])
# Calculate metrics
metrics_train <- calculate_metrics(cm_train_subpop, cm_train)
metrics_test <- calculate_metrics(cm_test_subpop, cm_test)
# Store metrics
subpop_metrics_train[[subpop]] <- metrics_train
subpop_metrics_test[[subpop]] <- metrics_test
# Display results
display_results(subpop, metrics_train, metrics_test)
}
}
}
# Find the most privileged and most disadvantaged subpopulations
extremes_train <- find_extremes(subpop_metrics_train)
extremes_test <- find_extremes(subpop_metrics_test)
# Display the most privileged and disadvantaged subpopulations
cat("### RANKING OF SUBPOPULATIONS###")
cat("\n### Most Privileged Subpopulations (Training Data) ###\n")
cat("1. Lowest FPR:", extremes_train$most_privileged$FPR, "\n")
# Calculate benchmark metrics
cm_train <- table(data_train$crime, prediction_train)
cm_test <- table(data_test$crime, prediction_test)
# Create a list to store metrics for all subpopulations
subpop_metrics_train <- list()
subpop_metrics_test <- list()
# Iterate over combinations of Gender, Ethnicity, and Disability
for (gender in c("Male", "Female")) {
for (ethnicity in c("Minority", "Majority")) {
for (disability in c("Yes", "No")) {
subpop <- paste(gender, ethnicity, disability, sep = "_")
# Index selection
indices_train <- which(data_train$gender == gender & data_train$ethnicity == ethnicity & data_train$disability == disability)
indices_test <- which(data_test$gender == gender & data_test$ethnicity == ethnicity & data_test$disability == disability)
# Confusion matrix
cm_train_subpop <- table(data_train[indices_train,]$crime, prediction_train[indices_train])
cm_test_subpop <- table(data_test[indices_test,]$crime, prediction_test[indices_test])
# Calculate metrics
metrics_train <- calculate_metrics(cm_train_subpop, cm_train)
metrics_test <- calculate_metrics(cm_test_subpop, cm_test)
# Store metrics
subpop_metrics_train[[subpop]] <- metrics_train
subpop_metrics_test[[subpop]] <- metrics_test
# Display results
display_results(subpop, metrics_train, metrics_test)
}
}
}
# Find the most privileged and most disadvantaged subpopulations
extremes_train <- find_extremes(subpop_metrics_train)
extremes_test <- find_extremes(subpop_metrics_test)
# Display the most privileged and disadvantaged subpopulations along with their values
cat("### RANKING OF SUBPOPULATIONS ###")
cat("\n### Most Privileged Subpopulations (Training Data) ###\n")
cat("1. Lowest FPR:", extremes_train$most_privileged$FPR$subpop,
"(Value:", extremes_train$most_privileged$FPR$value, ")\n")
cat("2. Highest FNR (most desirable):", extremes_train$most_privileged$FNR$subpop,
"(Value:", extremes_train$most_privileged$FNR$value, ")\n")
cat("3. Highest Proportion of Favorable Outcome (Demographic Parity):", extremes_train$most_privileged$Demographic_Parity$subpop,
"(Value:", extremes_train$most_privileged$Demographic_Parity$value, ")\n")
cat("\n### Most Disadvantaged Subpopulations (Training Data) ###\n")
cat("1. Highest FPR:", extremes_train$most_disadvantaged$FPR$subpop,
"(Value:", extremes_train$most_disadvantaged$FPR$value, ")\n")
cat("2. Lowest FNR (least desirable):", extremes_train$most_disadvantaged$FNR$subpop,
"(Value:", extremes_train$most_disadvantaged$FNR$value, ")\n")
cat("3. Lowest Proportion of Favorable Outcome (Demographic Parity):", extremes_train$most_disadvantaged$Demographic_Parity$subpop,
"(Value:", extremes_train$most_disadvantaged$Demographic_Parity$value, ")\n")
cat("\n### Most Privileged Subpopulations (Test Data) ###\n")
cat("1. Lowest FPR:", extremes_test$most_privileged$FPR$subpop,
"(Value:", extremes_test$most_privileged$FPR$value, ")\n")
cat("2. Highest FNR (most desirable):", extremes_test$most_privileged$FNR$subpop,
"(Value:", extremes_test$most_privileged$FNR$value, ")\n")
cat("3. Highest Proportion of Favorable Outcome (Demographic Parity):", extremes_test$most_privileged$Demographic_Parity$subpop,
"(Value:", extremes_test$most_privileged$Demographic_Parity$value, ")\n")
cat("\n### Most Disadvantaged Subpopulations (Test Data) ###\n")
cat("1. Highest FPR:", extremes_test$most_disadvantaged$FPR$subpop,
"(Value:", extremes_test$most_disadvantaged$FPR$value, ")\n")
cat("2. Lowest FNR (least desirable):", extremes_test$most_disadvantaged$FNR$subpop,
"(Value:", extremes_test$most_disadvantaged$FNR$value, ")\n")
cat("3. Lowest Proportion of Favorable Outcome (Demographic Parity):", extremes_test$most_disadvantaged$Demographic_Parity$subpop,
"(Value:", extremes_test$most_disadvantaged$Demographic_Parity$value, ")\n")
10/8
8/10
# FPR
extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
extremes_test$most_disadvantaged$FPR$value
extremes_test$most_privileged$FPR$value
# FPR
extremes_test$most_privileged$FPR$value / extremes_test$most_disadvantaged$FPR$value
# FPR
extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
# FNR
extremes_test$most_disadvantaged$FNR$value / extremes_test$most_privileged$FNR$value
extremes_test$most_privileged$FNR$value
extremes_test$most_disadvantaged$FNR$value
# Demographic Parity
extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_disadvantaged$Demographic_Parity$value
extremes_test$most_disadvantaged$Demographic_Parity$value
extremes_test$most_disadvantaged$Demographic_Parity$value
# Demographic Parity
extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_privileged$Demographic_Parity$value
# Print results
cat("**80% RULE**\n", "FPR ratio:", FPR_80 )
# FPR
# If this ratio is greater than 1.25, it indicates potential bias against the disadvantaged group.
FPR_80 <- extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
# FNR
# Again, if this ratio exceeds 1.25, it suggests potential bias.
FNR_80 <- extremes_test$most_disadvantaged$FNR$value / extremes_test$most_privileged$FNR$value
# Demographic Parity
# If this ratio is less than 0.8, it indicates potential adverse impact against the disadvantaged group.
parity_80 <- extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_privileged$Demographic_Parity$value
# Print results
cat("**80% RULE**\n", "FPR ratio:", FPR_80 )
# FPR
# If this ratio is greater than 1.25, it indicates potential bias against the disadvantaged group.
FPR_80 <- extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
# FNR
# Again, if this ratio exceeds 1.25, it suggests potential bias.
FNR_80 <- extremes_test$most_disadvantaged$FNR$value / extremes_test$most_privileged$FNR$value
# Demographic Parity
# If this ratio is less than 0.8, it indicates potential adverse impact against the disadvantaged group.
parity_80 <- extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_privileged$Demographic_Parity$value
# Print results
cat("**80% RULE**\n", "FPR ratio:", FPR_80, "\n")
if(FPR_80 < 1.25){
print("No potential bias between groups.")
} else {
print("Potential bias between groups.")
}
# FPR
# If this ratio is greater than 1.25, it indicates potential bias against the disadvantaged group.
FPR_80 <- extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
# FNR
# Again, if this ratio exceeds 1.25, it suggests potential bias.
FNR_80 <- extremes_test$most_disadvantaged$FNR$value / extremes_test$most_privileged$FNR$value
# Demographic Parity
# If this ratio is less than 0.8, it indicates potential adverse impact against the disadvantaged group.
parity_80 <- extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_privileged$Demographic_Parity$value
# Print results
cat("**80% RULE**\n", "FPR ratio:", FPR_80, "\n")
if(FPR_80 < 1.25){
cat("No potential bias between groups.")
} else {
cat("Potential bias between groups.")
}
cat("2. FNR ratio:", FNR_80, "\n")
# FPR
# If this ratio is greater than 1.25, it indicates potential bias against the disadvantaged group.
FPR_80 <- extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
# FNR
# Again, if this ratio exceeds 1.25, it suggests potential bias.
FNR_80 <- extremes_test$most_disadvantaged$FNR$value / extremes_test$most_privileged$FNR$value
# Demographic Parity
# If this ratio is less than 0.8, it indicates potential adverse impact against the disadvantaged group.
parity_80 <- extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_privileged$Demographic_Parity$value
# Print results
cat("**80% RULE**\n", "1. FPR ratio:", FPR_80, "\n")
if(FPR_80 < 1.25){
cat("No potential bias between groups for FPR.")
} else {
cat("Potential bias between groups for FPR.")
}
cat("2. FNR ratio:", FNR_80, "\n")
# FPR
# If this ratio is greater than 1.25, it indicates potential bias against the disadvantaged group.
FPR_80 <- extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
# FNR
# Again, if this ratio exceeds 1.25, it suggests potential bias.
FNR_80 <- extremes_test$most_disadvantaged$FNR$value / extremes_test$most_privileged$FNR$value
# Demographic Parity
# If this ratio is less than 0.8, it indicates potential adverse impact against the disadvantaged group.
parity_80 <- extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_privileged$Demographic_Parity$value
# Print results
cat("**80% RULE**\n", "1. FPR ratio:", FPR_80, "\n")
if(FPR_80 < 1.25){
cat("No potential bias between groups for FPR.\n")
} else {
cat("Potential bias between groups for FPR.\n")
}
cat("2. FNR ratio:", FNR_80, "\n")
0.001 / 0.5
extremes_test$most_disadvantaged$FPR$value
extremes_test$most_privileged$FPR$value
extremes_test$most_disadvantaged$FNR$value
extremes_test$most_privileged$FNR$value
# FNR
# Again, if this ratio exceeds 1.25, it suggests potential bias.
FNR_80 <- extremes_test$most_privileged$FNR$value / extremes_test$most_disadvantaged$FNR$value
FNR_80
# FPR
# If this ratio is greater than 1.25, it indicates potential bias against the disadvantaged group.
FPR_80 <- extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
# FNR
# Again, if this ratio exceeds 1.25, it suggests potential bias.
FNR_80 <- extremes_test$most_privileged$FNR$value / extremes_test$most_disadvantaged$FNR$value
# Demographic Parity
# If this ratio is less than 0.8, it indicates potential adverse impact against the disadvantaged group.
parity_80 <- extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_privileged$Demographic_Parity$value
# Print results
cat("**80% RULE**\n", "1. FPR ratio:", FPR_80, "\n")
if(FPR_80 < 1.25){
cat("No potential bias between groups for FPR.\n")
} else {
cat("Potential bias between groups for FPR.\n")
}
cat("2. FNR ratio:", FNR_80, "\n")
# FPR
# If this ratio is greater than 1.25, it indicates potential bias against the disadvantaged group.
FPR_80 <- extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
# FNR
# Again, if this ratio exceeds 1.25, it suggests potential bias.
FNR_80 <- extremes_test$most_privileged$FNR$value / extremes_test$most_disadvantaged$FNR$value
# Demographic Parity
# If this ratio is less than 0.8, it indicates potential adverse impact against the disadvantaged group.
parity_80 <- extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_privileged$Demographic_Parity$value
# Print results
cat("**80% RULE**\n", "1. FPR ratio:", FPR_80, "\n")
if(FPR_80 < 1.25){
cat("No potential bias between groups for FPR.\n")
} else {
cat("Potential bias between groups for FPR.\n")
}
cat("2. FNR ratio:", FNR_80, "\n")
if(FNR_80 < 1.25) {
cat("No potential bias between groups for FPR.\n")
} else {
cat("Potential bias between groups for FNR.\n")
}
cat("3. Dempgraphic Parity:", parity_80)
# FPR
# If this ratio is greater than 1.25, it indicates potential bias against the disadvantaged group.
FPR_80 <- extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
# FNR
# Again, if this ratio exceeds 1.25, it suggests potential bias.
FNR_80 <- extremes_test$most_privileged$FNR$value / extremes_test$most_disadvantaged$FNR$value
# Demographic Parity
# If this ratio is less than 0.8, it indicates potential adverse impact against the disadvantaged group.
parity_80 <- extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_privileged$Demographic_Parity$value
# Print results
cat("**80% RULE**\n", "1. FPR ratio:", FPR_80, "\n")
if(FPR_80 < 1.25){
cat("No potential bias between groups for FPR.\n")
} else {
cat("Potential bias between groups for FPR.\n")
}
cat("2. FNR ratio:", FNR_80, "\n")
if(FNR_80 < 1.25) {
cat("No potential bias between groups for FPR.\n")
} else {
cat("Potential bias between groups for FNR.\n")
}
cat("3. Dempgraphic Parity:", parity_80)
if(parity_80 > 0.8) {
print("No potential bias for demographic parity.\n")
} else {
print("Potential bias for demographic parity.")
}
# FPR
# If this ratio is greater than 1.25, it indicates potential bias against the disadvantaged group.
FPR_80 <- extremes_test$most_disadvantaged$FPR$value / extremes_test$most_privileged$FPR$value
# FNR
# Again, if this ratio exceeds 1.25, it suggests potential bias.
FNR_80 <- extremes_test$most_privileged$FNR$value / extremes_test$most_disadvantaged$FNR$value
# Demographic Parity
# If this ratio is less than 0.8, it indicates potential adverse impact against the disadvantaged group.
parity_80 <- extremes_test$most_disadvantaged$Demographic_Parity$value / extremes_test$most_privileged$Demographic_Parity$value
# Print results
cat("**80% RULE**\n", "1. FPR ratio:", FPR_80, "\n")
if(FPR_80 < 1.25){
cat("No potential bias between groups for FPR.\n")
} else {
cat("Potential bias between groups for FPR.\n")
}
cat("2. FNR ratio:", FNR_80, "\n")
if(FNR_80 < 1.25) {
cat("No potential bias between groups for FPR.\n")
} else {
cat("Potential bias between groups for FNR.\n")
}
cat("3. Dempgraphic Parity:", parity_80, "\n")
if(parity_80 > 0.8) {
cat("No potential bias for demographic parity.")
} else {
cat("Potential bias for demographic parity.")
}
